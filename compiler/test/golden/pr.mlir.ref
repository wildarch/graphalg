#dim = #graphalg.dim<distinct[0]<>>
module @"<stdin>" {
  func.func @withDamping(%arg0: !graphalg.mat<1 x 1 x i64>, %arg1: !graphalg.mat<1 x 1 x f64>) -> !graphalg.mat<1 x 1 x f64> {
    %0 = graphalg.cast %arg0 : <1 x 1 x i64> -> <1 x 1 x f64>
    %1 = graphalg.ewise %0 DIV %arg1 : <1 x 1 x f64>
    return %1 : !graphalg.mat<1 x 1 x f64>
  }
  func.func @PageRank(%arg0: !graphalg.mat<#dim x #dim x i1>, %arg1: !graphalg.mat<1 x 1 x f64>, %arg2: !graphalg.mat<1 x 1 x i64>) -> !graphalg.mat<#dim x 1 x f64> {
    %0 = graphalg.cast_dim #dim
    %1 = graphalg.literal 1.000000e+00 : f64
    %2 = graphalg.ewise %1 SUB %arg1 : <1 x 1 x f64>
    %3 = graphalg.cast %0 : <1 x 1 x i64> -> <1 x 1 x f64>
    %4 = graphalg.ewise %2 DIV %3 : <1 x 1 x f64>
    %5 = graphalg.literal 1.000000e+00 : f64
    %6 = graphalg.cast %arg0 : <#dim x #dim x i1> -> <#dim x #dim x i64>
    %7 = graphalg.reduce %6 : <#dim x #dim x i64> -> <#dim x 1 x i64>
    %8 = graphalg.apply_binary @withDamping %7, %arg1 : (!graphalg.mat<#dim x 1 x i64>, !graphalg.mat<1 x 1 x f64>) -> !graphalg.mat<#dim x 1 x f64>
    %9 = graphalg.reduce %arg0 : <#dim x #dim x i1> -> <#dim x 1 x i1>
    %10 = graphalg.const_mat false -> <#dim x 1 x i1>
    %11 = graphalg.literal true
    %12 = graphalg.broadcast %11 : <1 x 1 x i1> -> <#dim x 1 x i1>
    %13 = graphalg.mask %10<%9 : <#dim x 1 x i1>> = %12 : <#dim x 1 x i1> {complement = true}
    %14 = graphalg.const_mat 0.000000e+00 : f64 -> <#dim x 1 x f64>
    %15 = graphalg.literal 1.000000e+00 : f64
    %16 = graphalg.cast %0 : <1 x 1 x i64> -> <1 x 1 x f64>
    %17 = graphalg.ewise %15 DIV %16 : <1 x 1 x f64>
    %18 = graphalg.broadcast %17 : <1 x 1 x f64> -> <#dim x 1 x f64>
    %19 = graphalg.literal 0 : i64
    %20 = graphalg.for_const range(%19, %arg2) : <1 x 1 x i64> init(%18) : !graphalg.mat<#dim x 1 x f64> -> !graphalg.mat<#dim x 1 x f64> body {
    ^bb0(%arg3: !graphalg.mat<1 x 1 x i64>, %arg4: !graphalg.mat<#dim x 1 x f64>):
      %21 = graphalg.const_mat 0.000000e+00 : f64 -> <#dim x 1 x f64>
      %22 = graphalg.mask %21<%13 : <#dim x 1 x i1>> = %arg4 : <#dim x 1 x f64> {complement = false}
      %23 = graphalg.cast %0 : <1 x 1 x i64> -> <1 x 1 x f64>
      %24 = graphalg.ewise %arg1 DIV %23 : <1 x 1 x f64>
      %25 = graphalg.reduce %22 : <#dim x 1 x f64> -> <1 x 1 x f64>
      %26 = graphalg.mxm %24, %25 : <1 x 1 x f64>, <1 x 1 x f64>
      %27 = graphalg.ewise %arg4 DIV %8 : <#dim x 1 x f64>
      %28 = graphalg.ewise %4 ADD %26 : <1 x 1 x f64>
      %29 = graphalg.broadcast %28 : <1 x 1 x f64> -> <#dim x 1 x f64>
      %30 = graphalg.cast %arg0 : <#dim x #dim x i1> -> <#dim x #dim x f64>
      %31 = graphalg.transpose %30 : <#dim x #dim x f64>
      %32 = graphalg.mxm %31, %27 : <#dim x #dim x f64>, <#dim x 1 x f64>
      %33 = graphalg.ewise %29 ADD %32 : <#dim x 1 x f64>
      graphalg.yield %33 : !graphalg.mat<#dim x 1 x f64>
    } until {
    }
    return %20 : !graphalg.mat<#dim x 1 x f64>
  }
}
