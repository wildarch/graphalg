#dim = #graphalg.dim<distinct[0]<>>
module @"<stdin>" {
  func.func @TriangleCount(%arg0: !graphalg.mat<#dim x #dim x i1>) -> !graphalg.mat<1 x 1 x i64> {
    %0 = graphalg.cast %arg0 : <#dim x #dim x i1> -> <#dim x #dim x i64>
    %1 = graphalg.tril %arg0 : <#dim x #dim x i1>
    %2 = graphalg.tril %0 : <#dim x #dim x i64>
    %3 = graphalg.triu %0 : <#dim x #dim x i64>
    %4 = graphalg.cast_dim #dim
    %5 = graphalg.cast_dim #dim
    %6 = graphalg.const_mat 0 : i64 -> <#dim x #dim x i64>
    %7 = graphalg.transpose %3 : <#dim x #dim x i64>
    %8 = graphalg.mxm %2, %7 : <#dim x #dim x i64>, <#dim x #dim x i64>
    %9 = graphalg.mask %6<%1 : <#dim x #dim x i1>> = %8 : <#dim x #dim x i64> {complement = false}
    %10 = graphalg.reduce %9 : <#dim x #dim x i64> -> <1 x 1 x i64>
    return %10 : !graphalg.mat<1 x 1 x i64>
  }
}
