#dim = #graphalg.dim<distinct[0]<>>
module {
  func.func @WCC(%arg0: !graphalg.mat<#dim x #dim x i1>) -> !graphalg.mat<#dim x #dim x i1> {
    %0 = graphalg.const_mat false -> <#dim x 1 x i1>
    %1 = graphalg.literal true
    %2 = graphalg.broadcast %1 : <1 x 1 x i1> -> <#dim x 1 x i1>
    %3 = graphalg.diag %2 : !graphalg.mat<#dim x 1 x i1>
    %4 = graphalg.for_dim range(#dim) init(%3) : !graphalg.mat<#dim x #dim x i1> -> !graphalg.mat<#dim x #dim x i1> body {
    ^bb0(%arg1: !graphalg.mat<1 x 1 x i64>, %arg2: !graphalg.mat<#dim x #dim x i1>):
      %5 = graphalg.mxm %arg0, %arg2 : <#dim x #dim x i1>, <#dim x #dim x i1>
      %6 = graphalg.ewise %arg2 ADD %5 : <#dim x #dim x i1>
      %7 = graphalg.transpose %arg0 : <#dim x #dim x i1>
      %8 = graphalg.mxm %7, %arg2 : <#dim x #dim x i1>, <#dim x #dim x i1>
      %9 = graphalg.ewise %6 ADD %8 : <#dim x #dim x i1>
      %10 = graphalg.pick_any %9 : <#dim x #dim x i1>
      graphalg.yield %10 : !graphalg.mat<#dim x #dim x i1>
    } until {
    }
    return %4 : !graphalg.mat<#dim x #dim x i1>
  }
}
