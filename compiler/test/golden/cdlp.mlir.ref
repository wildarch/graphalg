#dim = #graphalg.dim<distinct[0]<>>
module @"<stdin>" {
  func.func @CDLP(%arg0: !graphalg.mat<#dim x #dim x i1>) -> !graphalg.mat<#dim x #dim x i1> {
    %0 = graphalg.literal 10 : i64
    %1 = graphalg.cast_dim #dim
    %2 = graphalg.const_mat false -> <#dim x 1 x i1>
    %3 = graphalg.literal true
    %4 = graphalg.broadcast %3 : <1 x 1 x i1> -> <#dim x 1 x i1>
    %5 = graphalg.diag %4 : !graphalg.mat<#dim x 1 x i1>
    %6 = graphalg.literal 0 : i64
    %7 = graphalg.for_const range(%6, %0) : <1 x 1 x i64> init(%5) : !graphalg.mat<#dim x #dim x i1> -> !graphalg.mat<#dim x #dim x i1> body {
    ^bb0(%arg1: !graphalg.mat<1 x 1 x i64>, %arg2: !graphalg.mat<#dim x #dim x i1>):
      %19 = graphalg.cast %arg0 : <#dim x #dim x i1> -> <#dim x #dim x i64>
      %20 = graphalg.cast %arg2 : <#dim x #dim x i1> -> <#dim x #dim x i64>
      %21 = graphalg.mxm %19, %20 : <#dim x #dim x i64>, <#dim x #dim x i64>
      %22 = graphalg.transpose %arg0 : <#dim x #dim x i1>
      %23 = graphalg.cast %22 : <#dim x #dim x i1> -> <#dim x #dim x i64>
      %24 = graphalg.cast %arg2 : <#dim x #dim x i1> -> <#dim x #dim x i64>
      %25 = graphalg.mxm %23, %24 : <#dim x #dim x i64>, <#dim x #dim x i64>
      %26 = graphalg.ewise %21 ADD %25 : <#dim x #dim x i64>
      %27 = graphalg.cast %26 : <#dim x #dim x i64> -> <#dim x #dim x !graphalg.trop_max_i64>
      %28 = graphalg.reduce %27 : <#dim x #dim x !graphalg.trop_max_i64> -> <#dim x 1 x !graphalg.trop_max_i64>
      %29 = graphalg.cast %28 : <#dim x 1 x !graphalg.trop_max_i64> -> <#dim x 1 x i64>
      %30 = graphalg.cast_dim #dim
      %31 = graphalg.const_mat 0 : i64 -> <#dim x 1 x i64>
      %32 = graphalg.literal 1 : i64
      %33 = graphalg.broadcast %32 : <1 x 1 x i64> -> <#dim x 1 x i64>
      %34 = graphalg.transpose %33 : <#dim x 1 x i64>
      %35 = graphalg.mxm %29, %34 : <#dim x 1 x i64>, <1 x #dim x i64>
      %36 = graphalg.ewise %26 EQ %35 : <#dim x #dim x i64>
      %37 = graphalg.pick_any %36 : <#dim x #dim x i1>
      graphalg.yield %37 : !graphalg.mat<#dim x #dim x i1>
    } until {
    }
    %8 = graphalg.reduce %arg0 : <#dim x #dim x i1> -> <#dim x 1 x i1>
    %9 = graphalg.transpose %arg0 : <#dim x #dim x i1>
    %10 = graphalg.reduce %9 : <#dim x #dim x i1> -> <#dim x 1 x i1>
    %11 = graphalg.ewise %8 ADD %10 : <#dim x 1 x i1>
    %12 = graphalg.cast_dim #dim
    %13 = graphalg.const_mat false -> <#dim x 1 x i1>
    %14 = graphalg.literal true
    %15 = graphalg.broadcast %14 : <1 x 1 x i1> -> <#dim x 1 x i1>
    %16 = graphalg.mask %13<%11 : <#dim x 1 x i1>> = %15 : <#dim x 1 x i1> {complement = true}
    %17 = graphalg.diag %16 : !graphalg.mat<#dim x 1 x i1>
    %18 = graphalg.ewise %17 ADD %7 : <#dim x #dim x i1>
    return %18 : !graphalg.mat<#dim x #dim x i1>
  }
}
