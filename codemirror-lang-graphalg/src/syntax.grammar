@top Program { Func* }

Func {
  "func" Ident params "->" type Block
}

params {
  "(" ")"
  | "(" Param ("," Param)* ")"
}

Param {
  Ident ":" type
}

type {
  Semiring
  | MatrixType { Matrix "<" Dim "," Dim "," Semiring ">" }
  | VectorType { Vector "<" Dim "," Semiring ">" }
}

Matrix { @specialize<Ident, "Matrix"> } 
Vector { @specialize<Ident, "Vector"> } 

Dim {
  DimOne { "1" } | Ident
}

Block {
  LBrace stmt* RBrace
}

stmt {
  Assign { Ident mask? fill? "=" expr ";" }
  | Accum { Ident "+" "=" expr ";" }
  | For { @specialize<Ident, "for"> Ident "in" range Block Until? }
  | Return { @specialize<Ident, "return"> expr ";" }
}

mask {
  Mask { "<" Not? Ident ">" }
}

fill {
  Fill { "[" ":" ("," ":")? "]" }
}

range {
  RangeConst { expr ":" expr }
  | RangeDim { expr }
}

Until {
  @specialize<Ident, "until"> expr ";"
}

@precedence { 
  dot @left,  
  times @left
  plus @left,
  compare @left
  ewise @left
}

expr {
  "(" expr ")"
  | Ident
  | PropExpr { expr !dot Dot Property }
  | AddExpr { expr !plus Plus expr }
  | SubExpr { expr !plus Minus expr }
  | MulExpr { expr !times Times expr }
  | DivExpr { expr !times Div expr }
  | CompareExpr { expr !compare Comparator expr }
  | NotExpr { Not expr }
  | NegExpr { Minus expr }
  | MatrixExpr { Matrix "<" Semiring ">" "(" expr "," expr ")" }
  | VectorExpr { Vector "<" Semiring ">" "(" expr ")" }
  | CastExpr { Cast "<" Semiring ">" "(" expr ")" }
  | LiteralExpr { Semiring "(" literal ")" }
  | ZeroExpr { @specialize<Ident, "zero"> "(" Semiring ")" }
  | OneExpr { @specialize<Ident, "one"> "(" Semiring ")" }
  | CallExpr { BuiltInFunc "(" expr ("," expr)* ")" }
}

Property { "T" | "nrows" | "ncols" | "nvals" }
Comparator { "==" | "!=" | "<" | ">" | "<=" | ">=" }
Cast { @specialize<Ident, "cast"> }
BuiltInFunc {
  @specialize<Ident, "diag">
  | @specialize<Ident, "apply">
  | @specialize<Ident, "select">
  | @specialize<Ident, "tril">
  | @specialize<Ident, "triu">
  | @specialize<Ident, "reduceRows">
  | @specialize<Ident, "reduceCols">
  | @specialize<Ident, "reduce">
  | @specialize<Ident, "pickAny">
}

literal {
  Boolean | Number 
}

Semiring {
  @specialize<Ident, "bool">
  | @specialize<Ident, "int">
  | @specialize<Ident, "real">
  | @specialize<Ident, "trop_int">
  | @specialize<Ident, "trop_real">
  | @specialize<Ident, "max_trop_int">
}

@skip { space | Comment }

@tokens {
  
  Ident { @asciiLetter $[a-zA-Z0-9_']* }

  Boolean { "true" | "false" }
  Number { '-'? int frac? }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }

  space { @whitespace+ }
  Comment { "//" ![\n]* }

  Dot { "." }
  Plus { "+" }
  Minus { "-" }
  Times { "*" }
  Div { "/" }
  Not { "!" }
  @precedence { Comment, Div }

  LBrace { "{" }
  RBrace { "}" }
}

@detectDelim
