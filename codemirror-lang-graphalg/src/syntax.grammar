@top Program { Func* }

Func {
  "func" Ident params "->" type block
}

params {
  "(" ")"
  | "(" Param ("," Param)* ")"
}

Param {
  Ident ":" type
}

type {
  Semiring
  | Matrix { @specialize<Ident, "Matrix"> "<" Dim "," Dim "," Semiring ">" }
  | Vector { @specialize<Ident, "Vector"> "<" Dim "," Semiring ">" }
}

Dim {
  DimOne { "1" } | Ident
}

block {
  "{" stmt* "}"
}

stmt {
  Assign { Ident mask? fill? "=" expr ";" }
  | Accum { Ident "+" "=" expr ";" }
  | For { @specialize<Ident, "for"> Ident "in" range block until? }
  | Return { @specialize<Ident, "return"> expr ";" }
}

mask {
  Mask { "<" "!"? Ident ">" }
}

fill {
  Fill { "[" ":" ("," ":")? "]" }
}

range {
  RangeConst { expr ":" expr }
  | RangeDim { expr }
}

until {
  @specialize<Ident, "until"> expr ";"
}

@precedence { 
  dot @left,  
  times @left
  plus @left,
  compare @left
  ewise @left
}

expr {
  "(" expr ")"
  | Ident
  | TransExpr { expr !dot "." "T" }
  | NrowsExpr { expr !dot "." "nrows" }
  | NcolsExpr { expr !dot "." "ncols" }
  | NvalsExpr { expr !dot "." "nvals" }
  | AddExpr { expr !plus "+" expr }
  | SubExpr { expr !plus "-" expr }
  | MulExpr { expr !times "*" expr }
  | DivExpr { expr !times Div expr }
  | EqExpr { expr !compare "==" expr }
  | NeExpr { expr !compare "!=" expr }
  | LtExpr { expr !compare "<" expr }
  | GtExpr { expr !compare ">" expr }
  | LteExpr { expr !compare "<=" expr }
  | GteExpr { expr !compare ">=" expr }
  | NotExpr { "!" expr }
  | NegExpr { "-" expr }
  | MatrixExpr { @specialize<Ident, "Matrix"> "<" Semiring ">" "(" expr "," expr ")" }
  | VectorExpr { @specialize<Ident, "Vector"> "<" Semiring ">" "(" expr ")" }
  | DiagExpr { @specialize<Ident, "diag"> "(" expr ")" }
  | ApplyExpr { @specialize<Ident, "apply"> "(" Ident "," expr ("," expr)? ")" }
  | SelectExpr { @specialize<Ident, "select"> "(" Ident "," expr ("," expr)? ")" }
  | TrilExpr { @specialize<Ident, "tril"> "(" expr ")" }
  | TriuExpr { @specialize<Ident, "triu"> "(" expr ")" }
  | ReduceRowsExpr { @specialize<Ident, "reduceRows"> "(" expr ")" }
  | ReduceColsExpr { @specialize<Ident, "reduceCols"> "(" expr ")" }
  | ReduceExpr { @specialize<Ident, "reduce"> "(" expr ")" }
  | CastExpr { @specialize<Ident, "cast"> "<" Semiring ">" "(" expr ")" }
  | LiteralExpr { Semiring "(" literal ")" }
  | ZeroExpr { @specialize<Ident, "zero"> "(" Semiring ")" }
  | OneExpr { @specialize<Ident, "one"> "(" Semiring ")" }
  | PickAnyExpr { @specialize<Ident, "pickAny"> "(" expr ")" }
}

literal {
  Boolean | Number 
}

Semiring {
  @specialize<Ident, "bool">
  | @specialize<Ident, "int">
  | @specialize<Ident, "real">
  | @specialize<Ident, "trop_int">
  | @specialize<Ident, "trop_real">
  | @specialize<Ident, "max_trop_int">
}

@skip { space | Comment }

@tokens {
  
  Ident { @asciiLetter $[a-zA-Z0-9_']* }

  Boolean { "true" | "false" }
  Number { '-'? int frac? }
  int  { '0' | $[1-9] @digit* }
  frac { '.' @digit+ }

  space { @whitespace+ }
  Comment { "//" ![\n]* }

  Div { "/" }
  @precedence { Comment, Div }
}

@detectDelim
